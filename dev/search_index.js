var documenterSearchIndex = {"docs":
[{"location":"#ADIOS2.jl","page":"ADIOS2.jl","title":"ADIOS2.jl","text":"","category":"section"},{"location":"","page":"ADIOS2.jl","title":"ADIOS2.jl","text":"ADIOS2.jl is a Julia interface to the ADIOS2, the Adaptable Input Output System version 2.","category":"page"},{"location":"#Types","page":"ADIOS2.jl","title":"Types","text":"","category":"section"},{"location":"","page":"ADIOS2.jl","title":"ADIOS2.jl","text":"Error\nMode","category":"page"},{"location":"#ADIOS2.Error","page":"ADIOS2.jl","title":"ADIOS2.Error","text":"@enum Error begin\n    error_none\n    error_invalid_argument\n    error_system_error\n    error_runtime_error\n    error_exception\nend\n\nError codes returned from various functions\n\n\n\n\n\n","category":"type"},{"location":"#ADIOS2.Mode","page":"ADIOS2.jl","title":"ADIOS2.Mode","text":"@enum Mode begin\n    mode_undefined\n    mode_write\n    mode_read\n    mode_append\n    mode_deferred\n    mode_sync\nend\n\nMode specifies for various functions. write, read, append are used for file operations, deferred, sync are used for get and put operations.\n\n\n\n\n\n","category":"type"},{"location":"#Adios-functions","page":"ADIOS2.jl","title":"Adios functions","text":"","category":"section"},{"location":"","page":"ADIOS2.jl","title":"ADIOS2.jl","text":"Adios\ninit_mpi\ninit_serial\ndeclare_io\nafinalize","category":"page"},{"location":"#ADIOS2.Adios","page":"ADIOS2.jl","title":"ADIOS2.Adios","text":"mutable struct Adios\n\nHolds a C pointer adios2_adios *.\n\nThis value is finalized automatically. It can also be explicitly finalized by calling finalize(adios).\n\n\n\n\n\n","category":"type"},{"location":"#ADIOS2.init_mpi","page":"ADIOS2.jl","title":"ADIOS2.init_mpi","text":"adios = init_mpi(MPI.Comm)\nadios::Union{Adios,Nothing}\n\nStarting point for MPI apps. Creates an ADIOS handler. MPI collective and it calls MPI_Comm_dup.\n\n\n\n\n\n","category":"function"},{"location":"#ADIOS2.init_serial","page":"ADIOS2.jl","title":"ADIOS2.init_serial","text":"adios = init_serial()\nadios::Union{Adios,Nothing}\n\nInitialize an Adios struct in a serial, non-MPI application. Doesnâ€™t require a runtime config file.\n\nSee also the ADIOS2 documentation.\n\n\n\n\n\n","category":"function"},{"location":"#ADIOS2.declare_io","page":"ADIOS2.jl","title":"ADIOS2.declare_io","text":"io = declare_io(adios::Adios, name::AbstractString)\nio::Union{AIO,Nothing}\n\nDeclare a new IO handler.\n\nSee also the ADIOS2 documentation.\n\n\n\n\n\n","category":"function"},{"location":"#ADIOS2.afinalize","page":"ADIOS2.jl","title":"ADIOS2.afinalize","text":"err = afinalize(adios::Adios)\nerr::Error\n\nFinalize the ADIOS context adios. It is usually not necessary to call this function.\n\nInstead of calling this function, one can also call the finalizer via finalize(adios). This finalizer is also called automatically when the Adios object is garbage collected.\n\nSee also the ADIOS2 documentation\n\n\n\n\n\n","category":"function"}]
}
