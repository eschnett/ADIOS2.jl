name: CompatLowerBounds
on:
  - push
  - pull_request
  #TODO schedule:
  #TODO   - cron: 0 0 * * *
  #TODO workflow_dispatch:
jobs:
  test:
    name: Julia ${{matrix.version}} - ${{matrix.os}} - ${{matrix.arch}} - ${{github.event_name}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - arch: "aarch64"
            os: "macOS-latest"
            version: "1.11"
            #TODO skipmpi: 'true'     # Why does this not work in CI? This works locally.
          - arch: "x64"
            os: "macOS-latest"
            version: "1.11"
            #TODO skipmpi: 'true'     # Why does this not work in CI? This works locally.
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.11"
          # Windows gets stuck after `File write tests`. Don't know why.
          - arch: "x64"
            os: "windows-latest"
            version: "1.11"
            skipmpi: 'true'     # MPI doesn't work on Windows
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.10"
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.9"
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.8"
            skipmpi: 'true'     # Why does this not work?
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.7"
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{matrix.version}}
          arch: ${{matrix.arch}}
      - uses: julia-actions/cache@v2
      - name: Downgrade to lower bound versions
        uses: julia-actions/julia-downgrade-compat@v1
        with:
          skip: Pkg, TOML
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - name: Install mpiexecjl
        if: ${{matrix.skipmpi != 'true'}}
        # MPICH has problems starting up on some platforms. We're using OpenMPI instead.
        run: |
          julia --project=@. --eval '
            using Pkg
            Pkg.add("MPIPreferences")
            using MPIPreferences
            MPIPreferences.use_jll_binary("OpenMPI_jll")' &&
          julia --project=@. --eval '
            using MPI
            MPI.install_mpiexecjl()' &&
          echo 'env ~/.julia/bin/mpiexecjl -verbose -n 2 --project=@. "$@"' >~/.julia/bin/mpiexecjl2 &&
          chmod a+x ~/.julia/bin/mpiexecjl2
      - uses: julia-actions/julia-runtest@v1
        if: ${{matrix.skipmpi != 'true'}}
        with:
          prefix: $HOME/.julia/bin/mpiexecjl2
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: eschnett/ADIOS2.jl
