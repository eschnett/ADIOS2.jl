name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{matrix.version}} - ${{matrix.os}} - ${{matrix.arch}} - ${{github.event_name}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.8"
            prefix: $HOME/.julia/bin/mpiexecjl2
          - arch: "x64"
            os: "windows-latest"
            version: "1.8"
            prefix:             # MPI does not seem to work on Windows
          - arch: "x64"
            os: "macOS-latest"
            version: "1.8"
            prefix: $HOME/.julia/bin/mpiexecjl2
          # 32-bit architecture are not supported by ADIOS2
          # - arch: "x86"
          #   os: "ubuntu-latest"
          #   version: "1.8"
          - arch: "x64"
            os: "ubuntu-latest"
            version: "nightly"
            prefix: $HOME/.julia/bin/mpiexecjl2
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.6"
            prefix: $HOME/.julia/bin/mpiexecjl2
          - arch: "x64"
            os: "ubuntu-latest"
            version: "1.7"
            prefix: $HOME/.julia/bin/mpiexecjl2
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{matrix.version}}
          arch: ${{matrix.arch}}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{runner.os}}-test-${{env.cache-name}}-${{hashFiles('**/Project.toml')}}
          restore-keys: |
            ${{runner.os}}-test-${{env.cache-name}}-
            ${{runner.os}}-test-
            ${{runner.os}}-
      - uses: julia-actions/julia-buildpkg@v1
        env:
          PYTHON:
      - uses: julia-actions/julia-runtest@v1
        continue-on-error: ${{matrix.version == 'nightly'}}
      - run: |
          julia --project=@. -e '
            using MPI
            MPI.install_mpiexecjl()' &&
          echo '~/.julia/bin/mpiexecjl -n 2 --project=@. "$@"' >~/.julia/bin/mpiexecjl2 &&
          chmod a+x ~/.julia/bin/mpiexecjl2
      - uses: julia-actions/julia-runtest@v1
        with:
          prefix: ${{ matrix.prefix }}
        continue-on-error: ${{matrix.version == 'nightly'}}
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
